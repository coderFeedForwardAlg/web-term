Here are the exact steps to set up a React project with Vite and Tailwind CSS, using official documentation as reference:

---

### 1. Create a Vite + React Project

Open your terminal and run:

```bash
npm create vite@latest my-app -- --template react
```
or, with Yarn:
```bash
yarn create vite my-app --template react
```
Replace `my-app` with your desired project name.

---

### 2. Move into Your Project Directory

```bash
cd my-app
```

---

### 3. Install Dependencies

Install the required dependencies:

```bash
npm install
```
or
```bash
yarn
```

---

### 4. Install Tailwind CSS

Follow the [official Tailwind CSS with Vite guide](https://tailwindcss.com/docs/guides/vite):

```bash
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
```

This creates `tailwind.config.js` and `postcss.config.js`.

---

### 5. Configure Tailwind to Remove Unused Styles in Production

Edit your `tailwind.config.js` file to include the paths to all of your template files:

```js
// tailwind.config.js
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
```

---

### 6. Add Tailwind Directives to Your CSS

Replace the contents of `src/index.css` (or create it if it doesnâ€™t exist) with:

```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

---

### 7. Import the CSS File

Make sure `src/main.jsx` (or `src/main.tsx` if using TypeScript) imports the CSS file:

```js
import './index.css'
```

---

### 8. Start the Development Server

```bash
npm run dev
```
or
```bash
yarn dev
```

---

### 9. Test Tailwind

Edit `src/App.jsx` and add a Tailwind class to test:

```jsx
function App() {
  return (
    <h1 className="text-3xl font-bold underline">
      Hello world!
    </h1>
  )
}
```

---

**References:**
- [Vite + React Guide](https://vitejs.dev/guide/)
- [Tailwind CSS with Vite](https://tailwindcss.com/docs/guides/vite)

Let me know if you need troubleshooting or want to add more features!